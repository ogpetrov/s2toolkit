# -*- coding: utf-8 -*-

"""
/***************************************************************************
 S2Toolkit
                                 A QGIS plugin
 Tools for the S2 Geometry.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-02
        copyright            : (C) 2024 by Mikhail Melnikov, Oleg Petrov
        email                : support@ibtgeo.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Mikhail Melnikov, Oleg Petrov'
__date__ = '2024-05-02'
__copyright__ = '(C) 2024 by Mikhail Melnikov, Oleg Petrov'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingException,
                       QgsFields,
                       QgsField,
                       QgsWkbTypes,
                       QgsFeatureRequest,
                       QgsRectangle,
                       QgsFeature,
                       QgsGeometry,
                       QgsCoordinateTransform,
                       QgsCoordinateReferenceSystem,
                       QgsProject,
                       QgsProcessingParameterNumber)
from .s2sphere import s2sphere
from . import resources

class S2ToolkitAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    LVL = 'LVL'
    # MIN_LVL = 'MIN_LVL'
    # MAX_LVL = 'MAX_LVL'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.LVL,
                self.tr('S2 Geometry level'),
                type=QgsProcessingParameterNumber.Type.Integer,
                minValue = 1, defaultValue = 12
            )
        )
        
        # self.addParameter(
        #     QgsProcessingParameterNumber(
        #         self.MIN_LVL,
        #         self.tr('Minimal S2 Geometry level'),
        #         type=QgsProcessingParameterNumber.Type.Integer,
        #         minValue = 1, defaultValue = 12
        #     )
        # )
        
        # self.addParameter(
        #     QgsProcessingParameterNumber(
        #         self.MAX_LVL,
        #         self.tr('Maximal S2 Geometry level'),
        #         type=QgsProcessingParameterNumber.Type.Integer,
        #         minValue = 1, defaultValue = 12
        #     )
        # )
        
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        if source is None:
            raise QgsProcessingException(self.invalidSourceError(parameters,
                                                                 self.INPUT))
        fields = QgsFields()
        fields.append(QgsField('id', QVariant.Int, '', 20))
        fields.append(QgsField('cellid', QVariant.String, 'string', 20))
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                                               context, fields,
                                               QgsWkbTypes.Type.Polygon,
                                               QgsCoordinateReferenceSystem("EPSG:4326"))
        if sink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters,
                                                               self.OUTPUT))

        # Bounding box
        features = source.getFeatures(QgsFeatureRequest().
                                      setSubsetOfAttributes([]))
        bounds = QgsRectangle()
        for current, f in enumerate(features):
            if feedback.isCanceled():
                break
            if not f.hasGeometry():
                continue
            # Bounding boxes, calculate on the fly for efficiency
            bounds.combineExtentWith(f.geometry().boundingBox())

        # Transform projected coordinates to WGS84
        transform = QgsCoordinateTransform(source.sourceCrs(),
                                    QgsCoordinateReferenceSystem("EPSG:4326"),
                                    QgsProject.instance())
        bounds_wgs84 = transform.transformBoundingBox(bounds)
        # Get coordinates of boundaries
        xmin, xmax, ymax, ymin = (bounds_wgs84.xMaximum(),
                                  bounds_wgs84.xMinimum(),
                                  bounds_wgs84.yMaximum(),
                                  bounds_wgs84.yMinimum())
        # Get S2 Rectangle
        region_rect = s2sphere.LatLngRect.from_point_pair(
            s2sphere.LatLng.from_degrees(ymin, xmin),
            s2sphere.LatLng.from_degrees(ymax, xmax))
        # Create coverer
        coverer = s2sphere.RegionCoverer()
        # Get min and max levels from parameters
        min_level = self.parameterAsInt(parameters, self.LVL, context)
        max_level = self.parameterAsInt(parameters, self.LVL, context)
        # Raise Error if min_level bigger than max_level
        coverer.min_level = min_level
        coverer.max_level = max_level
        covering = coverer.get_covering(region_rect)
        
        total = 100.0 / (len(covering)) if covering else 0
        
        # Cell id to geometry in WKT, then into sink
        for current, cell in enumerate(covering):
            cell_obj = s2sphere.Cell(s2sphere.CellId(cell.id()))
            vs = []
            for i in range(4):
                vertex = cell_obj.get_vertex(i)
                lat_lng = s2sphere.LatLng.from_point(vertex)
                vs.append((float(lat_lng.lng().degrees),
                           float(lat_lng.lat().degrees)))
            wkt = (f'POLYGON (({vs[0][0]} {vs[0][1]}, {vs[1][0]} {vs[1][1]}, '
                   f'{vs[2][0]} {vs[2][1]}, {vs[3][0]} {vs[3][1]}, '
                   f'{vs[0][0]} {vs[0][1]}))')
            if not feedback.isCanceled():
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromWkt(wkt))
                feature.setAttributes([current, cell.id()])
                sink.addFeature(feature, QgsFeatureSink.Flag.FastInsert)
                # Update the progress bar
                feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'S2 from Extent'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """Returns a localised short help string for the algorithm.
        """
        help_str = """
        This tool generates an S2 geometry polygon vector layer from the \
        bounding box extent of a vector layer with any type of geometry \
        (points, lines, polygons). Unlike other methods that may use the \
        layer's predefined extent, this tool specifically calculates \
        the bounding box to capture the actual spatial extent of the \
        vector features.

        <b>Usage</b>
        <u>Input Layer</u>: Any vector layer.
        <u>S2 Geometry Level</u>: Desired S2 geometry level. \
        CAUTION: Levels higher than 17 may require extended processing time!
        <u>Output Layer</u>: Polygon layer projected in WGS84 (EPSG:4326)
        """

        return self.tr(help_str)

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        return QIcon(':/plugins/s2toolkit/logo.png')
    
    def createInstance(self):
        return S2ToolkitAlgorithm()
